#!/usr/bin/env python
# coding: utf-8

# Map function 

# In[2]:


def square(num):
    return num**2


# In[3]:


mylist=[1,2,3,4,5,6]


# In[4]:


map(square,mylist)


# In[5]:


list(map(square,mylist))


# In[6]:


#another map function


# In[7]:


def splicer(mystring):
    if len(mystring)%2==0:
        return 'even'
    else:
        return mystring[0]


# In[8]:


mynames=['sukhmani','love','jap','leen']


# In[10]:


list(map(splicer,mynames))


# filter function

# In[13]:


def check_even(num):
    if num%2==0:
        return num


# In[14]:


num=[0,1,2,3,4,5,6,7,8,9,10]


# In[15]:


list(filter(check_even,num))


# LAMBDA EXPRESSION

# In[16]:


def square(num):
    result= num**2
    return result


# In[17]:


square(2)


# In[18]:


#by simplifying it:
def square(num):
    return num**2


# In[19]:


square(2)


# In[20]:


#by writing it in a single line


# In[21]:


def square(num): return num**2


# In[22]:


#instead of writing all the function like def square(num) we could simply write 
#lambda nunm


# In[23]:


#examples


# In[25]:


lambda num: num**2
#it is suppose to write in a single line


# In[26]:


#or we can write is :
square=lambda num: num**2


# In[27]:


square(2)


# So why would use this? Many function calls need a function passed in, such as map and filter. Often you only need to use the function you are passing in once, so instead of formally defining it, you just use the lambda expression. Let's repeat some of the examples from above with a lambda expression

# In[28]:


#using lambda in the map


# In[30]:


list(map(lambda num:num**2,mylist))


# In[31]:


list(filter(lambda num : num%2==0,num))


# In[32]:


#lambda is just way more easier and not complex as of definig a function


# In[33]:


#example


# In[35]:


lambda s: s[0]# Lambda expression for grabbing the first character of a string:**


# In[36]:


#Lambda expression for reversing a string: 


# In[37]:


lambda s: s[::-1]


# In[38]:


lambda x,y: x+y


# In[ ]:




